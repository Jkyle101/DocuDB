import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import {
  FaFolder,
  FaFileAlt,
  FaChevronRight,
  FaPlus,
  FaUpload,
  FaTrash,
  FaArrowLeft,
  FaShareAlt,
  FaArrowsAlt,
  FaTh,
  FaList,
  FaFilePdf,
  FaFileWord,
  FaFileExcel,
  FaFileImage,
  FaFileArchive,
  FaFileVideo,
  FaEllipsisV,
  FaCloudDownloadAlt,
  FaEye,
  FaBars,
  FaTimes
} from "react-icons/fa";

import CreateFolderModal from "../components/CreateFolderModal.jsx";
import MoveModal from "../components/MoveModal";
import ShareModal from "../components/ShareModal";
import UploadModal from "../components/UploadModal";
import { useOutletContext } from "react-router-dom";

const API = "http://localhost:3001";

export default function Home() {
  const userId = localStorage.getItem("userId");
  const role = localStorage.getItem("role") || "user";

  const [currentFolderId, setCurrentFolderId] = useState(null);
  const [folders, setFolders] = useState([]);
  const [files, setFiles] = useState([]);
  const [breadcrumbs, setBreadcrumbs] = useState([]);
  const [currentFolder, setCurrentFolder] = useState(null);

  const [view, setView] = useState("grid");
  const [showCreate, setShowCreate] = useState(false);
  const [showUpload, setShowUpload] = useState(false);
  const [moveTarget, setMoveTarget] = useState(null);
  const [shareTarget, setShareTarget] = useState(null);
  const [selectedItem, setSelectedItem] = useState(null);
  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, item: null });
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  const { searchResults } = useOutletContext();

  // Track window width for responsiveness
  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Auto-close mobile menu when resizing to larger screens
  useEffect(() => {
    if (windowWidth > 768 && isMobileMenuOpen) {
      setIsMobileMenuOpen(false);
    }
  }, [windowWidth, isMobileMenuOpen]);

  // Fetch folders + files + breadcrumbs
  const fetchFolderContents = async (folderId) => {
    const params = { userId, role, parentFolder: folderId || "" };
    const [fdrRes, filRes, bcRes] = await Promise.all([
      axios.get(`${API}/folders`, { params }),
      axios.get(`${API}/files`, { params }),
      axios.get(`${API}/breadcrumbs`, { params: { folderId } }),
    ]);
    setFolders(fdrRes.data);
    setFiles(filRes.data);
    setBreadcrumbs(bcRes.data);
  };

  const [myFolders, setMyFolders] = useState([]);
  const [myFiles, setMyFiles] = useState([]);

  useEffect(() => {
    const fetchMyDrive = async () => {
      const res = await axios.get("http://localhost:3001/folders", {
        params: { userId, parentFolder: currentFolderId },
      });
      setMyFolders(res.data);
    };
    fetchMyDrive();
  }, [currentFolderId]);

  useEffect(() => {
    fetchFolderContents(currentFolder).catch(console.error);
  }, [currentFolder, userId, role]);

  // File icons
  const iconByMime = useMemo(
    () => (mimetype) => {
      if (!mimetype) return <FaFileAlt className="file-icon text-secondary" />;
      if (mimetype.includes("pdf"))
        return <FaFilePdf className="file-icon text-danger" />;
      if (mimetype.includes("word") || mimetype.includes("doc"))
        return <FaFileWord className="file-icon text-primary" />;
      if (mimetype.includes("excel") || mimetype.includes("spreadsheet"))
        return <FaFileExcel className="file-icon text-success" />;
      if (mimetype.includes("image"))
        return <FaFileImage className="file-icon text-warning" />;
      if (mimetype.includes("zip") || mimetype.includes("rar"))
        return <FaFileArchive className="file-icon text-muted" />;
      if (mimetype.includes("video"))
        return <FaFileVideo className="file-icon text-info" />;
      return <FaFileAlt className="file-icon text-secondary" />;
    },
    []
  );

  const goInto = (folderId) => {
    setCurrentFolder(folderId);
    if (windowWidth < 768) setIsMobileMenuOpen(false);
  };
  
  const goUp = () => {
    if (!breadcrumbs.length) return;
    const parent = breadcrumbs[breadcrumbs.length - 2];
    setCurrentFolder(parent ? parent._id : null);
  };

  const deleteFolder = async (folder) => {
    if (!window.confirm(`Delete folder "${folder.name}" and its contents?`))
      return;
    await axios.delete(`${API}/folders/${folder._id}`, {
      params: { userId, role },
    });
    setFolders((s) => s.filter((f) => f._id !== folder._id));
  };

  const deleteFile = async (file) => {
    if (!window.confirm(`Delete file "${file.originalName}"?`)) return;
    await axios.delete(`${API}/files/${file._id}`, {
      params: { userId, role },
    });
    setFiles((s) => s.filter((f) => f._id !== file._id));
  };

  const handleContextMenu = (e, item) => {
    e.preventDefault();
    setSelectedItem(item);
    setContextMenu({
      visible: true,
      x: e.pageX,
      y: e.pageY,
      item: item
    });
  };

  const handleClick = () => {
    setContextMenu({ ...contextMenu, visible: false });
  };

  useEffect(() => {
    document.addEventListener("click", handleClick);
    return () => {
      document.removeEventListener("click", handleClick);
    };
  }, []);

  // Format file size
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Use search results if available, otherwise show normal
  const visibleFiles = searchResults || files;
  const visibleFolders = searchResults ? [] : folders;

  // Responsive column classes
  const getGridColumns = () => {
    if (windowWidth < 576) return "col-6";
    if (windowWidth < 768) return "col-6 col-sm-4";
    if (windowWidth < 992) return "col-6 col-sm-4 col-md-3";
    return "col-6 col-sm-4 col-md-3 col-xl-2";
  };

  return (
    <>
      <div className="container-fluid py-3 file-manager-container">
        {/* Mobile Header */}
        {windowWidth < 768 && (
          <div className="d-flex justify-content-between align-items-center mb-3">
            <button 
              className="btn btn-outline-primary"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            >
              {isMobileMenuOpen ? <FaTimes /> : <FaBars />}
            </button>
            <h5 className="mb-0 text-primary">My Drive</h5>
            <div>
              <button
                className="btn btn-primary btn-sm me-2"
                onClick={() => setShowCreate(true)}
                title="New Folder"
              >
                <FaPlus />
              </button>
              <button
                className="btn btn-success btn-sm"
                onClick={() => setShowUpload(true)}
                title="Upload"
              >
                <FaUpload />
              </button>
            </div>
          </div>
        )}

        <div className="row">
          {/* Sidebar for larger screens, dropdown for mobile */}
          {windowWidth >= 768 ? (
            <div className="col-md-3 col-lg-2 d-none d-md-block">
              <div className="sidebar-sticky">
                <div className="card mb-4">
                  <div className="card-body">
                    <h6 className="card-title">View Options</h6>
                    <div className="btn-group w-100 mb-3" role="group">
                      <button
                        className={`btn ${view === "grid" ? "btn-primary" : "btn-outline-primary"}`}
                        onClick={() => setView("grid")}
                        title="Grid View"
                      >
                        <FaTh />
                      </button>
                      <button
                        className={`btn ${view === "list" ? "btn-primary" : "btn-outline-primary"}`}
                        onClick={() => setView("list")}
                        title="List View"
                      >
                        <FaList />
                      </button>
                    </div>
                    
                    <button
                      className="btn btn-primary w-100 mb-2"
                      onClick={() => setShowCreate(true)}
                    >
                      <FaPlus className="me-1" /> New Folder
                    </button>
                    <button
                      className="btn btn-success w-100"
                      onClick={() => setShowUpload(true)}
                    >
                      <FaUpload className="me-1" /> Upload
                    </button>
                  </div>
                </div>
                
                <div className="card">
                  <div className="card-body">
                    <h6 className="card-title">Quick Stats</h6>
                    <div className="small">
                      <div className="d-flex justify-content-between">
                        <span>Folders:</span>
                        <span className="text-primary">{folders.length}</span>
                      </div>
                      <div className="d-flex justify-content-between">
                        <span>Files:</span>
                        <span className="text-primary">{files.length}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            /* Mobile menu dropdown */
            <div className={`col-12 mobile-menu ${isMobileMenuOpen ? 'open' : ''}`}>
              <div className="card mb-3">
                <div className="card-body">
                  <div className="d-flex justify-content-between align-items-center mb-3">
                    <h6 className="mb-0">View Options</h6>
                    <div className="btn-group" role="group">
                      <button
                        className={`btn btn-sm ${view === "grid" ? "btn-primary" : "btn-outline-primary"}`}
                        onClick={() => setView("grid")}
                      >
                        <FaTh />
                      </button>
                      <button
                        className={`btn btn-sm ${view === "list" ? "btn-primary" : "btn-outline-primary"}`}
                        onClick={() => setView("list")}
                      >
                        <FaList />
                      </button>
                    </div>
                  </div>
                  
                  <div className="row">
                    <div className="col-6">
                      <button
                        className="btn btn-primary w-100 mb-2"
                        onClick={() => setShowCreate(true)}
                      >
                        <FaPlus className="me-1" /> Folder
                      </button>
                    </div>
                    <div className="col-6">
                      <button
                        className="btn btn-success w-100 mb-2"
                        onClick={() => setShowUpload(true)}
                      >
                        <FaUpload className="me-1" /> Upload
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Main Content Area */}
          <div className={`${windowWidth >= 768 ? 'col-md-9 col-lg-10' : 'col-12'}`}>
            {/* Header for larger screens */}
            {windowWidth >= 768 && (
              <div className="d-flex justify-content-between align-items-center mb-4">
                {/* Breadcrumbs */}
                <div className="d-flex align-items-center flex-wrap">
                  {currentFolder && (
                    <button className="btn btn-outline-secondary btn-sm me-2" onClick={goUp}>
                      <FaArrowLeft className="me-1" /> Back
                    </button>
                  )}
                  <div className="d-flex align-items-center flex-wrap">
                    <span className="fw-bold me-2 text-primary">My Drive</span>
                    {breadcrumbs.length > 0 &&
                      breadcrumbs.map((b, index) => (
                        <span key={b._id || 'root'} className="d-flex align-items-center">
                          <FaChevronRight className="mx-2 text-muted" size={12} />
                          <button
                            className="btn btn-link p-0 text-dark text-decoration-none"
                            onClick={() => setCurrentFolder(b._id || null)}
                          >
                            {b.name || "Root"}
                          </button>
                        </span>
                      ))}
                  </div>
                </div>
              </div>
            )}

            {/* Stats Bar */}
            <div className="row mb-4">
              <div className="col-12">
                <div className="card stats-card">
                  <div className="card-body py-2">
                    <div className="d-flex justify-content-between flex-wrap">
                      <span className="text-muted mb-1 mb-md-0">
                        {folders.length} folder{folders.length !== 1 ? 's' : ''}, {files.length} file{files.length !== 1 ? 's' : ''}
                      </span>
                      <span className="text-muted">
                        Last updated: {new Date().toLocaleTimeString()}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* GRID VIEW */}
            {view === "grid" ? (
              <div className="row g-3">
                {/* Folders */}
                {visibleFolders.map((folder) => (
                  <div
                    key={folder._id}
                    className={getGridColumns()}
                    onContextMenu={(e) => handleContextMenu(e, { type: 'folder', data: folder })}
                    onClick={() => setSelectedItem({ type: 'folder', data: folder })}
                  >
                    <div className={`card folder-card h-100 ${selectedItem?.data?._id === folder._id ? 'selected' : ''}`}>
                      <div
                        className="card-body text-center"
                        role="button"
                        onDoubleClick={() => goInto(folder._id)}
                      >
                        <div className="position-absolute top-0 end-0 p-2">
                          <button 
                            className="btn btn-sm btn-light"
                            onClick={(e) => {
                              e.stopPropagation();
                              setContextMenu({
                                visible: true,
                                x: e.pageX,
                                y: e.pageY,
                                item: { type: 'folder', data: folder }
                              });
                            }}
                          >
                            <FaEllipsisV />
                          </button>
                        </div>
                        <FaFolder size={windowWidth < 576 ? 32 : 42} className="text-warning mb-2 folder-icon" />
                        <h6 className="card-title text-truncate">{folder.name}</h6>
                        <p className="text-muted small mb-0">Folder</p>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Files */}
                {visibleFiles.map((file) => (
                  <div
                    key={file._id}
                    className={getGridColumns()}
                    onContextMenu={(e) => handleContextMenu(e, { type: 'file', data: file })}
                    onClick={() => setSelectedItem({ type: 'file', data: file })}
                  >
                    <div className={`card file-card h-100 ${selectedItem?.data?._id === file._id ? 'selected' : ''}`}>
                      <div className="card-body text-center">
                        <div className="position-absolute top-0 end-0 p-2">
                          <button 
                            className="btn btn-sm btn-light"
                            onClick={(e) => {
                              e.stopPropagation();
                              setContextMenu({
                                visible: true,
                                x: e.pageX,
                                y: e.pageY,
                                item: { type: 'file', data: file }
                              });
                            }}
                          >
                            <FaEllipsisV />
                          </button>
                        </div>
                        <div className="mb-2">{iconByMime(file.mimetype)}</div>
                        <h6 className="card-title text-truncate">{file.originalName}</h6>
                        <p className="text-muted small">{formatFileSize(file.size)}</p>
                        <div className="btn-group w-100" role="group">
                          <a
                            className="btn btn-sm btn-outline-primary"
                            href={`${API}/view/${file.filename}`}
                            target="_blank"
                            rel="noreferrer"
                            title="Preview"
                          >
                            <FaEye />
                          </a>
                          <a
                            className="btn btn-sm btn-outline-success"
                            href={`${API}/download/${file.filename}`}
                            title="Download"
                          >
                            <FaCloudDownloadAlt />
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              // LIST VIEW
              <div className="table-container">
                <div className="table-responsive">
                  <table className="table table-hover align-middle">
                    <thead className="table-light">
                      <tr>
                        <th>Name</th>
                        {windowWidth >= 576 && <th>Type</th>}
                        {windowWidth >= 768 && <th>Size</th>}
                        {windowWidth >= 992 && <th>Modified</th>}
                        <th className="text-center">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {visibleFolders.map((folder) => (
                        <tr 
                          key={folder._id} 
                          onContextMenu={(e) => handleContextMenu(e, { type: 'folder', data: folder })}
                          onClick={() => setSelectedItem({ type: 'folder', data: folder })}
                          className={selectedItem?.data?._id === folder._id ? 'table-active' : ''}
                        >
                          <td 
                            role="button" 
                            onDoubleClick={() => goInto(folder._id)}
                            className="d-flex align-items-center"
                          >
                            <FaFolder className="text-warning me-2" /> 
                            <span className="text-truncate">{folder.name}</span>
                          </td>
                          {windowWidth >= 576 && <td>Folder</td>}
                          {windowWidth >= 768 && <td>—</td>}
                          {windowWidth >= 992 && <td>{new Date(folder.createdAt).toLocaleDateString()}</td>}
                          <td className="text-center">
                            <div className="btn-group">
                              <button
                                className="btn btn-sm btn-outline-secondary"
                                onClick={() => goInto(folder._id)}
                                title="Open"
                              >
                                <FaEye />
                              </button>
                              {windowWidth >= 768 && (
                                <>
                                  <button
                                    className="btn btn-sm btn-outline-secondary"
                                    onClick={() => setMoveTarget({ type: "folder", item: folder })}
                                    title="Move"
                                  >
                                    <FaArrowsAlt />
                                  </button>
                                  <button
                                    className="btn btn-sm btn-outline-secondary"
                                    onClick={() => setShareTarget({ type: "folder", item: folder })}
                                    title="Share"
                                  >
                                    <FaShareAlt />
                                  </button>
                                </>
                              )}
                              <button
                                className="btn btn-sm btn-outline-danger"
                                onClick={() => deleteFolder(folder)}
                                title="Delete"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                      {visibleFiles.map((file) => (
                        <tr 
                          key={file._id}
                          onContextMenu={(e) => handleContextMenu(e, { type: 'file', data: file })}
                          onClick={() => setSelectedItem({ type: 'file', data: file })}
                          className={selectedItem?.data?._id === file._id ? 'table-active' : ''}
                        >
                          <td className="d-flex align-items-center">
                            <span className="me-2">{iconByMime(file.mimetype)}</span>
                            <span className="text-truncate">{file.originalName}</span>
                          </td>
                          {windowWidth >= 576 && <td>{file.mimetype.split('/')[1] || file.mimetype}</td>}
                          {windowWidth >= 768 && <td>{formatFileSize(file.size)}</td>}
                          {windowWidth >= 992 && <td>{new Date(file.uploadDate).toLocaleDateString()}</td>}
                          <td className="text-center">
                            <div className="btn-group">
                              <a
                                className="btn btn-sm btn-outline-primary"
                                href={`${API}/view/${file.filename}`}
                                target="_blank"
                                rel="noreferrer"
                                title="Preview"
                              >
                                <FaEye />
                              </a>
                              <a
                                className="btn btn-sm btn-outline-success"
                                href={`${API}/download/${file.filename}`}
                                title="Download"
                              >
                                <FaCloudDownloadAlt />
                              </a>
                              {windowWidth >= 768 && (
                                <>
                                  <button
                                    className="btn btn-sm btn-outline-secondary"
                                    onClick={() => setMoveTarget({ type: "file", item: file })}
                                    title="Move"
                                  >
                                    <FaArrowsAlt />
                                  </button>
                                  <button
                                    className="btn btn-sm btn-outline-secondary"
                                    onClick={() => setShareTarget({ type: "file", item: file })}
                                    title="Share"
                                  >
                                    <FaShareAlt />
                                  </button>
                                </>
                              )}
                              <button
                                className="btn btn-sm btn-outline-danger"
                                onClick={() => deleteFile(file)}
                                title="Delete"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Empty State */}
            {visibleFolders.length === 0 && visibleFiles.length === 0 && (
              <div className="text-center py-5 empty-state">
                <FaFolder className="text-muted mb-3" size={48} />
                <h5 className="text-muted">This folder is empty</h5>
                <p className="text-muted">Upload files or create a new folder to get started</p>
                <button
                  className="btn btn-primary me-2"
                  onClick={() => setShowUpload(true)}
                >
                  <FaUpload className="me-1" /> Upload Files
                </button>
                <button
                  className="btn btn-outline-primary"
                  onClick={() => setShowCreate(true)}
                >
                  <FaPlus className="me-1" /> New Folder
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Context Menu */}
        {contextMenu.visible && (
          <div 
            className="context-menu show" 
            style={{ 
              top: contextMenu.y, 
              left: Math.min(contextMenu.x, windowWidth - 220) 
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="context-menu-header">
              {contextMenu.item.type === 'folder' ? (
                <><FaFolder className="text-warning me-2" /> {contextMenu.item.data.name}</>
              ) : (
                <><FaFileAlt className="text-primary me-2" /> {contextMenu.item.data.originalName}</>
              )}
            </div>
            <div className="context-menu-divider"></div>
            {contextMenu.item.type === 'folder' ? (
              <>
                <button className="context-menu-item" onClick={() => goInto(contextMenu.item.data._id)}>
                  <FaEye className="me-2" /> Open
                </button>
                <button className="context-menu-item" onClick={() => setMoveTarget({ type: "folder", item: contextMenu.item.data })}>
                  <FaArrowsAlt className="me-2" /> Move
                </button>
                <button className="context-menu-item" onClick={() => setShareTarget({ type: "folder", item: contextMenu.item.data })}>
                  <FaShareAlt className="me-2" /> Share
                </button>
                <div className="context-menu-divider"></div>
                <button className="context-menu-item text-danger" onClick={() => deleteFolder(contextMenu.item.data)}>
                  <FaTrash className="me-2" /> Delete
                </button>
              </>
            ) : (
              <>
                <a className="context-menu-item" href={`${API}/view/${contextMenu.item.data.filename}`} target="_blank" rel="noreferrer">
                  <FaEye className="me-2" /> Preview
                </a>
                <a className="context-menu-item" href={`${API}/download/${contextMenu.item.data.filename}`}>
                  <FaCloudDownloadAlt className="me-2" /> Download
                </a>
                <button className="context-menu-item" onClick={() => setMoveTarget({ type: "file", item: contextMenu.item.data })}>
                  <FaArrowsAlt className="me-2" /> Move
                </button>
                <button className="context-menu-item" onClick={() => setShareTarget({ type: "file", item: contextMenu.item.data })}>
                  <FaShareAlt className="me-2" /> Share
                </button>
                <div className="context-menu-divider"></div>
                <button className="context-menu-item text-danger" onClick={() => deleteFile(contextMenu.item.data)}>
                  <FaTrash className="me-2" /> Delete
                </button>
              </>
            )}
          </div>
        )}

        {/* Modals */}
        {showCreate && (
          <>
            <div className="modal-backdrop fade show"></div>
            <CreateFolderModal
              onClose={() => setShowCreate(false)}
              onCreated={(folder) => setFolders((s) => [folder, ...s])}
              parentFolder={currentFolder}
            />
          </>
        )}
        {showUpload && (
          <>
            <div className="modal-backdrop fade show"></div>
            <UploadModal
              onClose={() => setShowUpload(false)}
              onUploaded={(created) => setFiles((s) => [created, ...s])}
              parentFolder={currentFolder}
            />
          </>
        )}
        {moveTarget && (
          <>
            <div className="modal-backdrop fade show"></div>
            <MoveModal
              onClose={() => setMoveTarget(null)}
              target={moveTarget}
              currentFolder={currentFolder}
              onMoved={() => {
                setMoveTarget(null);
                fetchFolderContents(currentFolder);
              }}
            />
          </>
        )}
        {shareTarget && (
          <>
            <div className="modal-backdrop fade show"></div>
            <ShareModal
              onClose={() => setShareTarget(null)}
              target={shareTarget}
            />
          </>
        )}
      </div>

      <style jsx>{`
        .file-manager-container {
          background-color: #f8f9fa;
          min-height: calc(100vh - 76px);
        }
        .stats-card {
          background: linear-gradient(135deg, #f1f8ff 0%, #e9f7ff 100%);
          border: 1px solid #c2e7ff;
        }
        .folder-card, .file-card {
          transition: all 0.2s ease;
          border: 1px solid #e9ecef;
          overflow: hidden;
        }
        .folder-card:hover, .file-card:hover {
          transform: translateY(-3px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
          border-color: #c2e7ff;
        }
        .folder-card.selected, .file-card.selected {
          border: 2px solid #0d6efd;
          background-color: #f0f7ff;
        }
        .folder-icon {
          filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
        }
        .file-icon {
          font-size: 2.2rem;
        }
        .empty-state {
          background-color: white;
          border-radius: 12px;
          padding: 3rem;
          margin-top: 2rem;
        }
        .table-container {
          background: white;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        .context-menu {
          position: fixed;
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          z-index: 1050;
          min-width: 200px;
          padding: 0.5rem 0;
        }
        .context-menu-header {
          padding: 0.5rem 1rem;
          font-weight: 600;
          border-bottom: 1px solid #e9ecef;
          display: flex;
          align-items: center;
        }
        .context-menu-item {
          width: 100%;
          text-align: left;
          padding: 0.5rem 1rem;
          border: none;
          background: none;
          display: flex;
          align-items: center;
          color: #212529;
        }
        .context-menu-item:hover {
          background-color: #f8f9fa;
        }
        .context-menu-divider {
          height: 1px;
          background-color: #e9ecef;
          margin: 0.25rem 0;
        }
        .sidebar-sticky {
          position: sticky;
          top: 20px;
        }
        .mobile-menu {
          display: none;
          transition: all 0.3s ease;
        }
        .mobile-menu.open {
          display: block;
        }
        @media (max-width: 767.98px) {
          .file-icon {
            font-size: 1.8rem;
          }
          .table-responsive {
            font-size: 0.875rem;
          }
          .btn-group .btn {
            padding: 0.25rem 0.4rem;
          }
        }
        @media (max-width: 575.98px) {
          .card-body {
            padding: 0.75rem;
          }
          .btn-group .btn {
            font-size: 0.75rem;
          }
        }
      `}</style>
    </>
  );
}